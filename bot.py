#!/usr/bin/env python3
# bot.py - –ù–æ–≤–æ—Å—Ç–Ω–æ–π –±–æ—Ç –¥–ª—è –∫–∞–Ω–∞–ª–∞ "Live –ü–∏—Ç–µ—Ä üì∏" (–ø–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è)
import os
import time
import json
import random
import asyncio
import aiohttp
import re
import signal
import sys
from datetime import datetime
from bs4 import BeautifulSoup
from telebot.async_telebot import AsyncTeleBot
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
BOT_TOKEN = os.getenv("BOT_TOKEN")
CHANNEL_ID = os.getenv("CHANNEL_ID", "@LivePiter")
AUTO_POST_INTERVAL = int(os.getenv("AUTO_POST_INTERVAL", "1800"))
PORT = int(os.getenv("PORT", "10000"))

if not BOT_TOKEN:
    raise SystemExit("‚ùå BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = AsyncTeleBot(BOT_TOKEN)

# --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–º–∏ –Ω–æ–≤–æ—Å—Ç—è–º–∏ ---
def load_posted_news():
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π"""
    try:
        posted_json = os.getenv("POSTED_NEWS", "[]")
        return set(json.loads(posted_json))
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ posted news: {e}")
        return set()

def save_posted_news(posted_news_set):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π"""
    try:
        posted_list = list(posted_news_set)
        print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(posted_list)} –Ω–æ–≤–æ—Å—Ç–µ–π")
        if posted_list:
            print("üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏:", posted_list[-3:])
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è posted news: {e}")

posted_news = load_posted_news()

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ ---
def signal_handler(signum, frame):
    print(f"üîª –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ...")
    save_posted_news(posted_news)
    sys.exit(0)

signal.signal(signal.SIGINT, signal_handler)
signal.signal(signal.SIGTERM, signal_handler)

# --- HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è –∑–¥–æ—Ä–æ–≤—å—è ---
async def health_server():
    """HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è"""
    from aiohttp import web
    
    async def health_check(request):
        return web.Response(
            text=json.dumps({
                "status": "üü¢ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç",
                "sources": len(NEWS_SOURCES),
                "posted": len(posted_news),
                "timestamp": datetime.now().isoformat()
            }),
            content_type='application/json'
        )
    
    app = web.Application()
    app.router.add_get('/health', health_check)
    app.router.add_get('/', health_check)
    
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, '0.0.0.0', PORT)
    await site.start()
    print(f"üåê HTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {PORT}")
    
    return runner

# --- Keep-Alive –¥–ª—è Render ---
async def keep_alive_ping():
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –ø–∏–Ω–≥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Å–Ω–∞ –Ω–∞ Render"""
    print("üîÑ Keep-alive –∑–∞–¥–∞—á–∞ –ó–ê–ü–£–©–ï–ù–ê")
    while True:
        try:
            print(f"üîÑ –ü—Ä–æ–±—É—é ping –Ω–∞ –ø–æ—Ä—Ç {PORT}...")
            async with aiohttp.ClientSession() as session:
                async with session.get(f'http://localhost:{PORT}/health', timeout=10) as resp:
                    if resp.status == 200:
                        print(f"üîÑ Keep-alive ping: {datetime.now().strftime('%H:%M:%S')}")
                    else:
                        print(f"‚ö†Ô∏è Keep-alive ping failed: {resp.status}")
        except Exception as e:
            print(f"‚ö†Ô∏è Keep-alive error: {e}")
        
        # –ü–∏–Ω–≥ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç (300 —Å–µ–∫—É–Ω–¥)
        await asyncio.sleep(300)

# --- –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫—Ä–∞—Å–∏–≤–æ–π –∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è Live –ü–∏—Ç–µ—Ä üì∏ ---
def generate_beautiful_placeholder():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≥–ª—É—à–∫–∏ –≤ —Å—Ç–∏–ª–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤"""
    try:
        from PIL import Image, ImageDraw, ImageFont
        
        width, height = 800, 600
        # –°–æ–∑–¥–∞–µ–º —Ñ–æ–Ω –≤ —Å—Ç–∏–ª–µ –Ω–æ–≤–æ—Å—Ç–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ (—Ç–µ–º–Ω–æ-—Å–∏–Ω–∏–π —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º)
        img = Image.new('RGB', (width, height), color='#0a1931')
        draw = ImageDraw.Draw(img)
        
        # –ì—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Ñ–æ–Ω
        for i in range(height):
            r = int(10 + (i / height) * 20)
            g = int(25 + (i / height) * 30)
            b = int(49 + (i / height) * 40)
            draw.line([(0, i), (width, i)], fill=(r, g, b))
        
        # –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å - –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π –∫—Ä–∞—Å–Ω—ã–π
        for i in range(80):
            red_value = int(139 + (i / 80) * 116)  # –û—Ç —Ç–µ–º–Ω–æ-–∫—Ä–∞—Å–Ω–æ–≥–æ –∫ —è—Ä–∫–æ-–∫—Ä–∞—Å–Ω–æ–º—É
            draw.line([(0, i), (width, i)], fill=(red_value, 0, 0))
        
        # –ù–∏–∂–Ω—è—è –ø–∞–Ω–µ–ª—å - –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π –∫—Ä–∞—Å–Ω—ã–π
        for i in range(height-80, height):
            red_value = int(139 + ((i - (height-80)) / 80) * 116)  # –û—Ç —Ç–µ–º–Ω–æ-–∫—Ä–∞—Å–Ω–æ–≥–æ –∫ —è—Ä–∫–æ-–∫—Ä–∞—Å–Ω–æ–º—É
            draw.line([(0, i), (width, i)], fill=(red_value, 0, 0))
        
        # –≠–ª–µ–º–µ–Ω—Ç—ã "—ç–∫—Ä–∞–Ω–æ–≤" –∫–∞–∫ –≤ –Ω–æ–≤–æ—Å—Ç–Ω–æ–π —Å—Ç—É–¥–∏–∏
        draw.rectangle([50, 100, width-50, height-100], outline='#d4af37', width=3)
        
        # –¢–µ–∫—Å—Ç –±–µ–≥—É—â–µ–π —Å—Ç—Ä–æ–∫–∏
        try:
            font_news = ImageFont.truetype("arial.ttf", 22)
            font_large = ImageFont.truetype("arial.ttf", 52)
            font_medium = ImageFont.truetype("arial.ttf", 28)
        except:
            font_news = ImageFont.load_default()
            font_large = ImageFont.load_default()
            font_medium = ImageFont.load_default()
        
        # –ë–µ–≥—É—â–∞—è —Å—Ç—Ä–æ–∫–∞ - —Ä–∞–∑–º–µ—â–∞–µ–º –ø–æ —Ü–µ–Ω—Ç—Ä—É –Ω–∏–∂–Ω–µ–π –∫—Ä–∞—Å–Ω–æ–π –ø–æ–ª–æ—Å—ã
        news_text = "–°–ê–ù–ö–¢-–ü–ï–¢–ï–†–ë–£–†–ì ‚Ä¢ –ê–ö–¢–£–ê–õ–¨–ù–´–ï –ù–û–í–û–°–¢–ò ‚Ä¢ –°–ê–ù–ö–¢-–ü–ï–¢–ï–†–ë–£–†–ì ‚Ä¢ –ê–ö–¢–£–ê–õ–¨–ù–´–ï –ù–û–í–û–°–¢–ò"
        text_y_position = height - 40  # –ü–æ —Ü–µ–Ω—Ç—Ä—É –Ω–∏–∂–Ω–µ–π –ø–æ–ª–æ—Å—ã
        draw.text((10, text_y_position), news_text, fill='#ffffff', font=font_news)
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç
        draw.text((width//2, height//2 - 40), "Live –ü–∏—Ç–µ—Ä", fill='#ffffff', 
                 font=font_large, anchor='mm', stroke_width=2, stroke_fill='#000000')
        draw.text((width//2, height//2 + 20), "–ù–û–í–û–°–¢–ù–û–ô –ö–ê–ù–ê–õ", fill='#d4af37', 
                 font=font_medium, anchor='mm')
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∫–∞–∫ –≤ –Ω–æ–≤–æ—Å—Ç–Ω–æ–π –≥—Ä–∞—Ñ–∏–∫–µ
        draw.rectangle([width//2 - 150, height//2 + 60, width//2 - 50, height//2 + 65], fill='#d4af37')
        draw.rectangle([width//2 + 50, height//2 + 60, width//2 + 150, height//2 + 65], fill='#d4af37')
        
        # –õ–æ–≥–æ—Ç–∏–ø –≤ –ª–µ–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π)
        draw.rectangle([20, 20, 60, 60], fill='#ffffff', outline='#8B0000', width=2)
        draw.text((40, 40), "LP", fill='#8B0000', font=font_medium, anchor='mm')
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        os.makedirs('./static', exist_ok=True)
        placeholder_path = './static/placeholder.jpg'
        img.save(placeholder_path, quality=95)
        
        print("üé® –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ –∑–∞–≥–ª—É—à–∫–∞ –≤ —Å—Ç–∏–ª–µ –Ω–æ–≤–æ—Å—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞")
        return placeholder_path
        
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞–≥–ª—É—à–∫–∏: {e}")
        # Fallback - –ø—Ä–æ—Å—Ç–∞—è –∑–∞–≥–ª—É—à–∫–∞
        try:
            from PIL import Image, ImageDraw
            img = Image.new('RGB', (800, 600), color='#0a1931')
            draw = ImageDraw.Draw(img)
            # –ö—Ä–∞—Å–Ω—ã–µ –ø–æ–ª–æ—Å—ã
            draw.rectangle([0, 0, 800, 80], fill='#8B0000')
            draw.rectangle([0, 520, 800, 600], fill='#8B0000')
            draw.rectangle([50, 50, 750, 550], outline='#d4af37', width=4)
            draw.text((400, 280), "Live –ü–∏—Ç–µ—Ä", fill='#ffffff', anchor='mm')
            draw.text((400, 320), "–ù–û–í–û–°–¢–ù–û–ô –ö–ê–ù–ê–õ", fill='#d4af37', anchor='mm')
            # –ë–µ–≥—É—â–∞—è —Å—Ç—Ä–æ–∫–∞
            draw.text((50, 560), "–°–ê–ù–ö–¢-–ü–ï–¢–ï–†–ë–£–†–ì ‚Ä¢ –ê–ö–¢–£–ê–õ–¨–ù–´–ï –ù–û–í–û–°–¢–ò", fill='#ffffff')
            placeholder_path = './static/placeholder.jpg'
            img.save(placeholder_path)
            return placeholder_path
        except Exception as e2:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–∞–∂–µ –ø—Ä–æ—Å—Ç—É—é –∑–∞–≥–ª—É—à–∫—É: {e2}")
            return None

# --- –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –¥–ª—è –∑–∞–∫–æ–Ω—á–µ–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π ---
def extract_complete_text_from_html(html_content, title):
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –Ω–æ–≤–æ—Å—Ç–∏ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å–º—ã—Å–ª–∞"""
    try:
        soup = BeautifulSoup(html_content, 'html.parser')
        
        # –£–¥–∞–ª—è–µ–º –Ω–µ–Ω—É–∂–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        for element in soup(['script', 'style', 'nav', 'footer', 'aside', 'header', 'form', 'button', 'iframe']):
            element.decompose()
        
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        content_selectors = [
            'article',
            '.article',
            '.content', 
            '.news-content',
            '.post-content',
            '.text',
            '.news-text',
            '.story__content',
            '.b-article__content',
            '.js-article-content',
            '[class*="content"]',
            '[class*="article"]',
            '[class*="post"]',
            '[class*="story"]'
        ]
        
        content_element = None
        for selector in content_selectors:
            content_element = soup.select_one(selector)
            if content_element:
                break
        
        if not content_element:
            content_element = soup.find('body') or soup
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∑–Ω–∞—á–∏–º—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Ç–µ–∫—Å—Ç–∞
        text_elements = content_element.find_all(['p', 'div', 'h2', 'h3'])
        meaningful_paragraphs = []
        
        for element in text_elements:
            text = element.get_text().strip()
            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è: —É–±–∏—Ä–∞–µ–º –∫–æ—Ä–æ—Ç–∫–∏–µ, —Ä–µ–∫–ª–∞–º–Ω—ã–µ –∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç–µ–∫—Å—Ç—ã
            if (len(text) > 40 and 
                not any(x in text for x in [
                    '¬©', '–§–æ—Ç–æ:', '–ò—Å—Ç–æ—á–Ω–∏–∫:', '–ß–∏—Ç–∞–π—Ç–µ —Ç–∞–∫–∂–µ:', '–†–µ–¥–∞–∫—Ü–∏—è',
                    '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏', '–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å', 'Rambler', '–¢–ê–°–°', 
                    'Lenta.ru', '–†–ò–ê –ù–æ–≤–æ—Å—Ç–∏', '–ü–æ–¥–µ–ª–∏—Ç—å—Å—è', '–°–ª–µ–¥–∏—Ç–µ –∑–∞',
                    'INTERFAX.RU', 'https://', 'http://', 'www.'
                ]) and
                not re.match(r'^\d{1,2}\s*[–∞-—è]', text.lower()) and
                len(text.split()) > 8 and
                not text.startswith('http')):
                meaningful_paragraphs.append(text)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç, —Å–æ—Ö—Ä–∞–Ω—è—è —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        if meaningful_paragraphs:
            # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 6-8 –∑–Ω–∞—á–∏–º—ã—Ö –∞–±–∑–∞—Ü–µ–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            selected_paragraphs = meaningful_paragraphs[:8]
            full_text = '\n\n'.join(selected_paragraphs)
            
            # –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É
            if len(full_text.split()) < 50:
                full_text = f"{title}\n\n{full_text}"
            
            return full_text[:3000]  # –£–≤–µ–ª–∏—á–∏–ª–∏ –ª–∏–º–∏—Ç –¥–ª—è –ø–æ–ª–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π
            
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ HTML: {e}")
    
    return ""

def remove_duplicate_text(text):
    """–£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∏–∑ –Ω–æ–≤–æ—Å—Ç–∏"""
    if not text:
        return text
    
    # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    sentences = re.split(r'[.!?]+', text)
    sentences = [s.strip() for s in sentences if s.strip()]
    
    # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π (—Å–æ—Ö—Ä–∞–Ω—è—è –ø–æ—Ä—è–¥–æ–∫)
    unique_sentences = []
    seen_sentences = set()
    
    for sentence in sentences:
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è (—É–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã, –ø—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É)
        normalized = re.sub(r'\s+', ' ', sentence).strip().lower()
        if normalized and normalized not in seen_sentences:
            seen_sentences.add(normalized)
            unique_sentences.append(sentence)
    
    # –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç –æ–±—Ä–∞—Ç–Ω–æ
    cleaned_text = '. '.join(unique_sentences) + '.' if unique_sentences else ''
    
    # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç —Å—Ç–∞–ª —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–º –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª
    if len(cleaned_text.split()) < 20 and len(text.split()) > 30:
        return text
    
    return cleaned_text

def create_engaging_title(original_title):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ü–µ–ø–ª—è—é—â–µ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –≤ —Å—Ç–∏–ª–µ Live –ü–∏—Ç–µ—Ä –ë–ï–ó –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –¥–æ–±–∞–≤–ª–µ–Ω–∏–π"""
    # –û—á–∏—â–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ—Ç –ª–∏—à–Ω–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    clean_title = original_title
    
    # –£–±–∏—Ä–∞–µ–º URL –∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
    clean_title = re.sub(r'https?://\S+|www\.\S+', '', clean_title)
    clean_title = re.sub(r'\b(INTERFAX\.RU|–†–ò–ê\s*–ù–æ–≤–æ—Å—Ç–∏|–¢–ê–°–°|Lenta\.ru|Rambler)\b', '', clean_title, flags=re.IGNORECASE)
    
    # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è —Ç–∏—Ä–µ –∏ —Ç–æ—á–∫–∏
    clean_title = re.sub(r'[‚Äì‚Äî]\s*[‚Äì‚Äî]+', '‚Äî', clean_title)
    clean_title = re.sub(r'\.\s*\.+', '.', clean_title)
    
    # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
    clean_title = remove_duplicate_text(clean_title)
    
    # –û–±—Ä–µ–∑–∞–µ–º —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
    if len(clean_title) > 120:
        sentences = clean_title.split('. ')
        if len(sentences) > 1:
            clean_title = sentences[0] + '.'
        else:
            clean_title = clean_title[:117] + '...'
    
    return clean_title.strip()

def format_news_live_piter_style(title, description, full_text):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –≤ —Å—Ç–∏–ª–µ Live –ü–∏—Ç–µ—Ä üì∏"""
    # –°–æ–∑–¥–∞–µ–º —á–∏—Å—Ç—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ë–ï–ó –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –¥–æ–±–∞–≤–ª–µ–Ω–∏–π
    clean_title = create_engaging_title(title)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç
    if full_text and len(full_text.split()) > 60:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç, –Ω–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–µ–º –µ–≥–æ
        paragraphs = full_text.split('\n\n')
        if len(paragraphs) >= 2:
            # –ë–µ—Ä–µ–º –≤–≤–µ–¥–µ–Ω–∏–µ –∏ –∫–ª—é—á–µ–≤—ã–µ –¥–µ—Ç–∞–ª–∏
            intro = paragraphs[0]
            key_details = []
            
            for p in paragraphs[1:4]:  # –ë–µ—Ä–µ–º —Å–ª–µ–¥—É—é—â–∏–µ 2-3 –∞–±–∑–∞—Ü–∞
                if len(p.split()) > 15 and len(key_details) < 2:
                    key_details.append(p)
            
            if key_details:
                formatted_text = f"{intro}\n\n" + "\n\n".join(key_details)
            else:
                formatted_text = intro
        else:
            formatted_text = full_text
    elif description and len(description.split()) > 20:
        formatted_text = description
    else:
        formatted_text = full_text if full_text else description
    
    # –£–î–ê–õ–Ø–ï–ú –í–°–ï –°–°–´–õ–ö–ò –ò –ò–°–¢–û–ß–ù–ò–ö–ò –ò–ó –¢–ï–ö–°–¢–ê
    formatted_text = re.sub(r'https?://\S+|www\.\S+', '', formatted_text)
    formatted_text = re.sub(r'\b(INTERFAX\.RU|–†–ò–ê\s*–ù–æ–≤–æ—Å—Ç–∏|–¢–ê–°–°|Lenta\.ru|Rambler|–§–æ–Ω—Ç–∞–Ω–∫–∞\.—Ä—É|78\.—Ä—É|–ö–∞–Ω–Ω–∞–ª7|–ü–µ—Ç–µ—Ä–±—É—Ä–≥2|–î–ü)\b', '', formatted_text, flags=re.IGNORECASE)
    formatted_text = re.sub(r'\.\s*[A-Z–ê-–Ø]+\s*\.\s*‚Äî', '.', formatted_text)  # –£–±–∏—Ä–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –≤ –Ω–∞—á–∞–ª–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    
    # –£–î–ê–õ–Ø–ï–ú –î–£–ë–õ–ò–†–û–í–ê–ù–ù–´–ô –¢–ï–ö–°–¢
    formatted_text = remove_duplicate_text(formatted_text)
    
    # –û—á–∏—Å—Ç–∫–∞ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    formatted_text = re.sub(r'\s+', ' ', formatted_text)
    formatted_text = re.sub(r'\.\s+', '.\n\n', formatted_text)  # –î–æ–±–∞–≤–ª—è–µ–º –∞–±–∑–∞—Ü—ã
    
    # –°–æ–±–∏—Ä–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    final_text = f"{clean_title}\n\n{formatted_text}"
    
    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
    final_text = re.sub(r'\n\s*\n', '\n\n', final_text)
    
    # –û–±—Ä–µ–∑–∞–µ–º –¥–æ —Ä–∞–∑—É–º–Ω—ã—Ö –ø—Ä–µ–¥–µ–ª–æ–≤, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–º—ã—Å–ª
    if len(final_text) > 3000:
        sentences = final_text.split('. ')
        if len(sentences) > 3:
            final_text = '. '.join(sentences[:4]) + "."
    
    return final_text.strip()

# --- –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π ---
NEWS_SOURCES = [
    # –û–±—â–µ—Ä–æ—Å—Å–∏–π—Å–∫–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ (—Ä–∞–±–æ—á–∏–µ)
    "https://lenta.ru/rss/news",
    "https://tass.ru/rss/v2.xml", 
    "https://news.rambler.ru/rss/world/",
    
    # –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥—Å–∫–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ (–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï)
    "https://www.fontanka.ru/fontanka.rss",  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π URL
    "https://78.ru/text/rss.xml",           # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π URL
    "https://kanal7.ru/rss/",               # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π URL
    "https://peterburg2.ru/rss/",           # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π URL
    "https://www.dp.ru/rss/",               # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π URL
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–∞–±–æ—á–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
    "https://ria.ru/export/rss2/archive/index.xml",
    "https://www.interfax.ru/rss.asp",
    "https://www.kommersant.ru/RSS/news.xml",
]

# --- –§—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å –Ω–æ–≤–æ—Å—Ç—è–º–∏ ---
def extract_image_from_item(item_soup):
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ RSS —ç–ª–µ–º–µ–Ω—Ç–∞"""
    image_sources = [
        lambda: item_soup.find("enclosure"),
        lambda: item_soup.find("media:content"),
        lambda: item_soup.find("media:thumbnail"),
        lambda: item_soup.find("image")
    ]
    
    for source in image_sources:
        try:
            element = source()
            if element and element.get("url"):
                url = element.get("url")
                if url and (url.startswith(('http', '//')) and 
                           any(ext in url.lower() for ext in ['.jpg', '.jpeg', '.png', '.webp'])):
                    return url
        except Exception:
            continue
    return None

def find_og_image(html_content):
    """–ü–æ–∏—Å–∫ Open Graph –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ HTML"""
    try:
        soup = BeautifulSoup(html_content, 'html.parser')
        og_image = soup.find('meta', property='og:image')
        if og_image and og_image.get('content'):
            url = og_image.get('content')
            if url and any(ext in url.lower() for ext in ['.jpg', '.jpeg', '.png', '.webp']):
                return url
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ OG –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
    return None

async def download_image(session, url):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    if not url:
        return None
        
    try:
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
        }
        
        if not url.startswith('http'):
            if url.startswith('//'):
                url = 'https:' + url
            else:
                return None
        
        async with session.get(url, headers=headers, timeout=30) as response:
            if response.status == 200:
                content_type = response.headers.get('content-type', '')
                if 'image' in content_type:
                    filename = f"./temp_image_{int(time.time())}_{random.randint(1000, 9999)}.jpg"
                    content = await response.read()
                    
                    if len(content) > 10240:  # –ú–∏–Ω–∏–º—É–º 10KB
                        with open(filename, 'wb') as f:
                            f.write(content)
                        return filename
                    else:
                        print(f"‚ö†Ô∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–æ–µ: {len(content)} –±–∞–π—Ç")
                
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {url}: {e}")
    
    return None

async def get_news_from_source(session, source_url, limit=5):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ –æ–¥–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞"""
    try:
        headers = {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'}
        
        print(f"üîç –ó–∞–ø—Ä–æ—Å –∫: {source_url}")
        async with session.get(source_url, headers=headers, timeout=15) as response:
            if response.status != 200:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ {response.status} –¥–ª—è {source_url}")
                return []
                
            content = await response.text()
            soup = BeautifulSoup(content, 'xml')
            items = soup.find_all('item')[:limit]
            
            news_items = []
            for item in items:
                try:
                    title_elem = item.find('title')
                    link_elem = item.find('link')
                    description_elem = item.find('description')
                    
                    if not title_elem or not link_elem:
                        continue
                        
                    title = title_elem.get_text().strip()
                    link = link_elem.get_text().strip()
                    description = ""
                    
                    if description_elem:
                        description = re.sub(r'<[^>]+>', '', description_elem.get_text()).strip()
                    
                    if not title or not link:
                        continue
                    
                    image_url = extract_image_from_item(item)
                    
                    # –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ—Ç –≤ RSS, –∏—â–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
                    if not image_url and link:
                        try:
                            async with session.get(link, headers=headers, timeout=8) as page_response:
                                if page_response.status == 200:
                                    page_content = await page_response.text()
                                    image_url = find_og_image(page_content)
                        except Exception as e:
                            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ: {e}")
                    
                    news_items.append({
                        'title': title,
                        'link': link,
                        'description': description,
                        'source': source_url,
                        'image': image_url
                    })
                    
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ {source_url}: {e}")
                    continue
            
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(news_items)} –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ {source_url}")
            return news_items
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ {source_url}: {e}")
        return []

async def get_all_news(limit_per_source=5):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""
    print("üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤...")
    
    async with aiohttp.ClientSession() as session:
        tasks = []
        for source in NEWS_SOURCES:
            task = get_news_from_source(session, source, limit_per_source)
            tasks.append(task)
            await asyncio.sleep(1)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        
        results = await asyncio.gather(*tasks, return_exceptions=True)
        
        all_news = []
        for result in results:
            if isinstance(result, list):
                all_news.extend(result)
        
        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(all_news)} –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ {len(NEWS_SOURCES)} –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤")
        return all_news

async def get_extended_news_text(link, title, session):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –Ω–æ–≤–æ—Å—Ç–∏ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
    if not link:
        return ""
        
    try:
        headers = {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'}
        async with session.get(link, headers=headers, timeout=10) as response:
            if response.status == 200:
                html = await response.text()
                return extract_complete_text_from_html(html, title)
                    
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –Ω–æ–≤–æ—Å—Ç–∏: {e}")
    
    return ""

async def prepare_news_item(item):
    """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –Ω–æ–≤–æ—Å—Ç–∏ –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    title = item.get('title', '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞')
    link = item.get('link', '')
    description = item.get('description', '')
    image_url = item.get('image', '')
    
    print(f"üìù –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞: {title[:60]}...")
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏
    news_text = ""
    if link:
        async with aiohttp.ClientSession() as session:
            news_text = await get_extended_news_text(link, title, session)
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤ —Å—Ç–∏–ª–µ Live –ü–∏—Ç–µ—Ä
    final_text = format_news_live_piter_style(title, description, news_text)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É
    word_count = len(final_text.split())
    if word_count < 40:  # –ú–∏–Ω–∏–º—É–º 40 —Å–ª–æ–≤ –¥–ª—è –∑–∞–∫–æ–Ω—á–µ–Ω–Ω–æ–π –Ω–æ–≤–æ—Å—Ç–∏
        print(f"‚ùå –ü—Ä–æ–ø—É—â–µ–Ω–∞ –Ω–æ–≤–æ—Å—Ç—å: '{title[:30]}...' - –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–µ–∫—Å—Ç–∞ ({word_count} —Å–ª–æ–≤)")
        return None
    
    print(f"‚úÖ –¢–µ–∫—Å—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω: {word_count} —Å–ª–æ–≤")
    
    # –†–∞–±–æ—Ç–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
    image_path = None
    if image_url:
        async with aiohttp.ClientSession() as session:
            image_path = await download_image(session, image_url)
            if image_path:
                print("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ –Ω–æ–≤–æ—Å—Ç–∏")
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∑–∞–≥–ª—É—à–∫—É
    if not image_path:
        image_path = generate_beautiful_placeholder()
        if image_path:
            print("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∑–∞–≥–ª—É—à–∫—É")
        else:
            print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–≥–ª—É—à–∫—É")
    
    return {
        'title': title,
        'summary': final_text,
        'link': link,
        'image_path': image_path,
        'word_count': word_count
    }

async def send_news_to_channel(news_item):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ—Å—Ç–∏ –≤ –∫–∞–Ω–∞–ª"""
    try:
        title = news_item['title']
        summary = news_item['summary']
        image_path = news_item['image_path']
        word_count = news_item['word_count']
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message_text = summary  # –£–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Ç–µ–∫—Å—Ç
        
        if image_path and os.path.exists(image_path):
            with open(image_path, 'rb') as photo:
                await bot.send_photo(
                    CHANNEL_ID,
                    photo,
                    caption=message_text,
                    parse_mode='HTML'
                )
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã (–∫—Ä–æ–º–µ –∑–∞–≥–ª—É—à–∫–∏)
            if 'temp_image_' in image_path:
                try:
                    os.remove(image_path)
                except:
                    pass
        else:
            await bot.send_message(
                CHANNEL_ID,
                message_text,
                parse_mode='HTML'
            )
        
        print(f"‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {title[:70]}... ({word_count} —Å–ª–æ–≤)")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ—Å—Ç–∏: {e}")
        return False

async def publish_news(count=1):
    """–ü—É–±–ª–∏–∫–∞—Ü–∏—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–æ–≤–æ—Å—Ç–µ–π"""
    print(f"üöÄ –ó–∞–ø—É—Å–∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ {count} –Ω–æ–≤–æ—Å—Ç–µ–π...")
    print("üìè –§–æ—Ä–º–∞—Ç: –∑–∞–∫–æ–Ω—á–µ–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –≤ —Å—Ç–∏–ª–µ Live –ü–∏—Ç–µ—Ä üì∏")
    
    all_news = await get_all_news()
    if not all_news:
        print("‚ö†Ô∏è –ù–æ–≤–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return 0
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –Ω–æ–≤–æ—Å—Ç–∏
    new_news = []
    for item in all_news:
        news_id = item.get('link') or item.get('title')
        if news_id and news_id not in posted_news:
            new_news.append(item)
    
    if not new_news:
        print("‚ÑπÔ∏è –ù–µ—Ç –Ω–æ–≤—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")
        return 0
    
    # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
    random.shuffle(new_news)
    
    published_count = 0
    attempts = 0
    max_attempts = min(len(new_news) * 2, 15)  # –ú–∞–∫—Å–∏–º—É–º 15 –ø–æ–ø—ã—Ç–æ–∫
    
    while published_count < count and attempts < max_attempts:
        if attempts >= len(new_news):
            break
            
        item = new_news[attempts]
        attempts += 1
        
        try:
            prepared_item = await prepare_news_item(item)
            
            if prepared_item is None:
                continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏, –Ω–µ –ø—Ä–æ—à–µ–¥—à–∏–µ –ø—Ä–æ–≤–µ—Ä–∫—É
                
            success = await send_news_to_channel(prepared_item)
            
            if success:
                news_id = item.get('link') or item.get('title')
                if news_id:
                    posted_news.add(news_id)
                    published_count += 1
                    save_posted_news(posted_news)
                
                # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø—É–±–ª–∏–∫–∞—Ü–∏—è–º–∏
                await asyncio.sleep(random.randint(45, 120))
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–∏: {e}")
            continue
    
    print(f"‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –Ω–æ–≤–æ—Å—Ç–µ–π: {published_count} –∏–∑ {count} –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö")
    return published_count

# --- –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ ---
@bot.message_handler(commands=['start'])
async def send_welcome(message):
    welcome_text = """
ü§ñ –ù–æ–≤–æ—Å—Ç–Ω–æ–π –±–æ—Ç –¥–ª—è –∫–∞–Ω–∞–ª–∞ "Live –ü–∏—Ç–µ—Ä üì∏"

üì∞ –ò—Å—Ç–æ—á–Ω–∏–∫–∏:
‚Ä¢ 3 —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–Ω—ã—Ö –ø–æ—Ä—Ç–∞–ª–∞
‚Ä¢ 5 –ª–æ–∫–∞–ª—å–Ω—ã—Ö –ø–∏—Ç–µ—Ä—Å–∫–∏—Ö –∏–∑–¥–∞–Ω–∏–π
‚Ä¢ 3 –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –Ω–∞–¥–µ–∂–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∞

üéØ –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
‚Ä¢ –ó–∞–∫–æ–Ω—á–µ–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ —Å –ø–æ–ª–Ω–æ–π —Å–º—ã—Å–ª–æ–≤–æ–π –Ω–∞–≥—Ä—É–∑–∫–æ–π
‚Ä¢ –õ–æ–∫–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–∞
‚Ä¢ –°—Ç–∏–ª—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∫–∞–∫ –≤ "Live –ü–∏—Ç–µ—Ä üì∏"
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–¥–±–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
‚Ä¢ –ö—Ä–∞—Å–∏–≤–∞—è –∞–≤—Ç–æ—Ä—Å–∫–∞—è –∑–∞–≥–ª—É—à–∫–∞

üìã –ö–æ–º–∞–Ω–¥—ã:
/post - –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏
/status - –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞  
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
/sources - –°–ø–∏—Å–æ–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
"""
    await bot.reply_to(message, welcome_text)

@bot.message_handler(commands=['post'])
async def manual_post(message):
    try:
        await bot.reply_to(message, "‚è≥ –ó–∞–ø—É—Å–∫–∞—é –ø—É–±–ª–∏–∫–∞—Ü–∏—é –Ω–æ–≤–æ—Å—Ç–µ–π...")
        count = random.randint(1, 2)
        published = await publish_news(count)
        await bot.reply_to(message, f"‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ {published} –Ω–æ–≤–æ—Å—Ç–µ–π –≤ —Å—Ç–∏–ª–µ 'Live –ü–∏—Ç–µ—Ä üì∏'")
    except Exception as e:
        await bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {e}")

@bot.message_handler(commands=['status'])
async def bot_status(message):
    status_text = f"""
üìä –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞:

ü§ñ –ë–æ—Ç: –ê–∫—Ç–∏–≤–µ–Ω
üì∞ –ò—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {len(NEWS_SOURCES)}
üì® –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {len(posted_news)}
üéØ –§–æ—Ä–º–∞—Ç: "Live –ü–∏—Ç–µ—Ä üì∏"
‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª: {AUTO_POST_INTERVAL} —Å–µ–∫
üèôÔ∏è –õ–æ–∫–∞–ª—å–Ω—ã–µ: {sum(1 for s in NEWS_SOURCES if 'fontanka' in s or '78' in s or 'kanal7' in s or 'peterburg' in s)} –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
"""
    await bot.reply_to(message, status_text)

@bot.message_handler(commands=['stats'])
async def bot_stats(message):
    stats_text = f"""
üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:

üìä –í—Å–µ–≥–æ –Ω–æ–≤–æ—Å—Ç–µ–π: {len(posted_news)}
üîó –ò—Å—Ç–æ—á–Ω–∏–∫–∏ ({len(NEWS_SOURCES)}):
"""
    for source in NEWS_SOURCES:
        source_name = source.split('//')[-1].split('/')[0]
        stats_text += f"   ‚Ä¢ {source_name}\n"
    
    await bot.reply_to(message, stats_text)

@bot.message_handler(commands=['sources'])
async def show_sources(message):
    sources_text = "üì∞ –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π:\n\n"
    
    federal = [s for s in NEWS_SOURCES if 'lenta' in s or 'tass' in s or 'rambler' in s or 'ria' in s or 'interfax' in s or 'kommersant' in s]
    local = [s for s in NEWS_SOURCES if s not in federal]
    
    sources_text += "üèõÔ∏è –§–µ–¥–µ—Ä–∞–ª—å–Ω—ã–µ:\n"
    for source in federal:
        source_name = source.split('//')[-1].split('/')[0]
        sources_text += f"‚Ä¢ {source_name}\n"
    
    sources_text += "\nüèôÔ∏è –ü–∏—Ç–µ—Ä—Å–∫–∏–µ:\n"
    for source in local:
        source_name = source.split('//')[-1].split('/')[0]
        sources_text += f"‚Ä¢ {source_name}\n"
    
    await bot.reply_to(message, sources_text)

async def auto_poster():
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
    print("üîÑ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏...")
    print("üéØ –§–æ—Ä–º–∞—Ç: –∑–∞–∫–æ–Ω—á–µ–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –≤ —Å—Ç–∏–ª–µ Live –ü–∏—Ç–µ—Ä üì∏")
    
    while True:
        try:
            news_count = random.randint(1, 2)
            print(f"üì∞ –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥: –ø—É–±–ª–∏–∫—É—é {news_count} –Ω–æ–≤–æ—Å—Ç–µ–π...")
            
            await publish_news(news_count)
            
            print(f"‚è≥ –°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ {AUTO_POST_INTERVAL} —Å–µ–∫—É–Ω–¥...")
            await asyncio.sleep(AUTO_POST_INTERVAL)
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ –∞–≤—Ç–æ-–ø–æ—Å—Ç–∏–Ω–≥–µ: {e}")
            await asyncio.sleep(300)  # –ñ–¥–µ–º 5 –º–∏–Ω—É—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –Ω–æ–≤–æ—Å—Ç–Ω–æ–≥–æ –±–æ—Ç–∞ 'Live –ü–∏—Ç–µ—Ä üì∏'...")
    print(f"üì∞ –ò—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {len(NEWS_SOURCES)} (—Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã–µ + –ø–∏—Ç–µ—Ä—Å–∫–∏–µ)")
    print(f"üéØ –§–æ—Ä–º–∞—Ç: –∑–∞–∫–æ–Ω—á–µ–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ —Å –ø–æ–ª–Ω–æ–π —Å–º—ã—Å–ª–æ–≤–æ–π –Ω–∞–≥—Ä—É–∑–∫–æ–π")
    print(f"‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞: {AUTO_POST_INTERVAL} —Å–µ–∫")
    print(f"üì∫ –ö–∞–Ω–∞–ª: {CHANNEL_ID}")
    print(f"üåê –ü–æ—Ä—Ç: {PORT}")
    print("üîß –í–µ—Ä—Å–∏—è: —Å keep-alive –¥–ª—è Render")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è –∑–¥–æ—Ä–æ–≤—å—è
    health_runner = await health_server()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º keep-alive –∑–∞–¥–∞—á—É
    print("üîÑ –°–æ–∑–¥–∞—é keep-alive –∑–∞–¥–∞—á—É...")
    keep_alive_task = asyncio.create_task(keep_alive_ping())
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á–∏
        bot_task = asyncio.create_task(bot.polling(non_stop=True))
        poster_task = asyncio.create_task(auto_poster())
        
        # –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á
        await asyncio.gather(bot_task, poster_task, keep_alive_task)
    except Exception as e:
        print(f"üí• –û—à–∏–±–∫–∞: {e}")
    finally:
        await health_runner.cleanup()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("üëã –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        save_posted_news(posted_news)
    except Exception as e:
        print(f"üí• –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        save_posted_news(posted_news)
